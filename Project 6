#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <math.h>

using namespace std;

const int SIZE_CONSTANT = 10;
const int SET_WIDTH_CONSTANT = 9;
const int SET_PRECISION_CONSTANT = 3;

void WriteToFile(double array[SIZE_CONSTANT][SIZE_CONSTANT]);

bool IterateHotPlate(double inputArray[SIZE_CONSTANT][SIZE_CONSTANT]);

void PrintHotPlate(double input[SIZE_CONSTANT][SIZE_CONSTANT]);

void InitializeHotPlateFromFile(double inputArray[SIZE_CONSTANT][SIZE_CONSTANT]);

int main() {
    double array[SIZE_CONSTANT][SIZE_CONSTANT];
    cout << "Hotplate simulator" << endl << endl;

    cout << "Printing the initial plate values..." << endl;
    int i, j;
    for (i = 0; i < SIZE_CONSTANT; i++) {
        for (j = 0; j < SIZE_CONSTANT; j++) {
            if (i == 0 || i == SIZE_CONSTANT - 1) {
                if (j != 0 && j != SIZE_CONSTANT - 1) {
                    array[i][j] = 100.0;
                } else {
                    array[i][j] = 0.0;
                }
            } else {
                array[i][j] = 0.0;
            }
        }
    }



    PrintHotPlate(array);



    bool oneIteration = IterateHotPlate(array);
    cout << "Printing plate after one iteration..." << endl;

    PrintHotPlate(array);


    bool continueLooping = true; //Should be self explanatory what this variable does.
    bool isDone = false; //Is done refers to whether or not the values in the plate have ceased to change by more than 0.1 degrees. This is modified
    // by manipulate array function
    
    while (continueLooping) {
        isDone = IterateHotPlate(array);

        if (isDone) {
            cout << "Printing final plate..." << endl;
            PrintHotPlate(array);
            continueLooping = false;
        }
    }

    cout << "Writing final plate to \"Hotplate.csv\"..." << endl;
    WriteToFile(array); //The array should be modified after each iteration using an array pass-by reference

    InitializeHotPlateFromFile(array);

    for (i = 0; i < 3; i++) {
        bool dummy = IterateHotPlate(array);
    }



    cout << "Printing input plate after 3 updates..." << endl;
    PrintHotPlate(array);
}

void WriteToFile(double array[SIZE_CONSTANT][SIZE_CONSTANT]) {

    string fileName = "Hotplate.csv";
    ofstream outSS;

    outSS.open(fileName);

    if (!outSS.is_open()) {
        cout << "failed to open file" << endl;

    }

    int i, j;

    for (i = 0; i < SIZE_CONSTANT; i++) {
        for (j = 0; j < SIZE_CONSTANT; j++) {
            if (j != SIZE_CONSTANT - 1) {
                outSS << fixed << setprecision(SET_PRECISION_CONSTANT) << setw(SET_WIDTH_CONSTANT) << array[i][j]
                      << ",";
            } else {
                outSS << fixed << setprecision(SET_PRECISION_CONSTANT) << setw(SET_WIDTH_CONSTANT) << array[i][j];
            }
        }
        outSS << endl;
    }

    outSS.close();
}

bool IterateHotPlate(double inputArray[SIZE_CONSTANT][SIZE_CONSTANT]) {

    //Creates a copy of the current state of the hotplate
    double copyArray[SIZE_CONSTANT][SIZE_CONSTANT];
    for (int i = 0; i < SIZE_CONSTANT; i++) {
        for (int j = 0; j < SIZE_CONSTANT; j++) {
            copyArray[i][j] = inputArray[i][j];
        }
    }

    //Updates the hotplate for the next iteration
    for (int i = 1; i < SIZE_CONSTANT - 1; i++) {
        for (int j = 1; j < SIZE_CONSTANT - 1; j++) {
            inputArray[i][j] =
                    (copyArray[i][j - 1] + copyArray[i][j + 1] + copyArray[i + 1][j] + copyArray[i - 1][j]) / 4.0;
        }
    }

    //Checks how many "cells" changed less than 0.1
    int steadyStateCheck = 0;
    for (int i = 0; i < SIZE_CONSTANT; i++) {
        for (int j = 0; j < SIZE_CONSTANT; j++) {
            if ((fabs(inputArray[i][j] - copyArray[i][j]) <= 0.1)) {
                steadyStateCheck++;
            }
        }
    }

    bool done = (steadyStateCheck == 100);
    return done;
}

void PrintHotPlate(double input[SIZE_CONSTANT][SIZE_CONSTANT]) {
    //Simple function to print the current state of the hotplate
    for (int i = 0; i < SIZE_CONSTANT; i++) {
        for (int j = 0; j < SIZE_CONSTANT - 1; j++) {
            cout << fixed << setprecision(SET_PRECISION_CONSTANT) << setw(SET_WIDTH_CONSTANT) << input[i][j] << ",";
        }
        cout << fixed << setprecision(SET_PRECISION_CONSTANT) << setw(SET_WIDTH_CONSTANT) << input[i][SIZE_CONSTANT - 1]
             << endl;
    }
}

void InitializeHotPlateFromFile(double inputArray[SIZE_CONSTANT][SIZE_CONSTANT]) {
    ifstream inFS;
    inFS.open("Inputplate.txt");

    if (!inFS.is_open()) {
        cout << "File failed to open" << endl;
    }

    double input = 0;
    for (int i = 0; i < SIZE_CONSTANT; i++) {
        for (int j = 0; j < SIZE_CONSTANT; j++) {
            inFS >> input;
            inputArray[i][j] = input;
        }
    }
    inFS.close();
}
